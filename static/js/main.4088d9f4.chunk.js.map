{"version":3,"sources":["StudentEvaluation.ts","FirebaseConfig.ts","Database.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["calculateGrades","evaluations","config","map","evaluation","unitsGrade","units","reduce","acc","unit","length","finalGrade","unitsGradePercentage","dailyGrade","dailyGradePercentage","tasksGrade","tasksGradePercentage","Object","objectSpread","calculateGradesForEvaluation","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Database","classCallCheck","this","firestore","firebase","initializeApp","createClass","key","value","state","localStorage","setItem","JSON","stringify","unparsedState","getItem","parse","_saveStateOnCloud","asyncToGenerator","regenerator_default","a","mark","_callee","studentEvaluations","wrap","_context","prev","next","abrupt","collection","add","stop","_x","apply","arguments","MyReactDataSheet","ReactDataSheet","database","defaultGradesConfig","columns","cellRenderer","props","style","padding","background","cell","readOnly","undefined","react_default","createElement","onMouseDown","onMouseOver","onDoubleClick","className","children","evaluationsToGrid","evaluationToGridRow","row","push","id","name","forEach","gridToEvaluations","grid","indexAfterUnits","slice","parseFloat","concat","gridRowToEvaluation","App","_React$Component","_this","possibleConstructorReturn","getPrototypeOf","call","addRow","currentEvaluation","updateState","unitsGradeConfigChanged","valueNumber","parseInt","configCandidate","nextConfigCandidate","configPercentageChanged","tasksGradeConfigChanged","dailyGradeConfigChanged","newConfig","console","log","gradesConfig","nextConfigCandidateValid","anEvaluation","updateEvaluations","callback","recalculatedEvaluations","recalculatedGrid","deleteStudentsWithoutName","filter","deleteDialogShown","changeTitle","title","addEvaluation","Date","now","changeCurrentEvaluation","evaluationName","find","setState","saveState","getState","inherits","_this2","Pane","height","paddingLeft","paddingTop","paddingBottom","paddingRight","borderRadius","TextInput","onChange","e","target","Select","width","marginTop","event","Button","marginLeft","appearance","onClick","App_MyReactDataSheet","data","valueRenderer","sheetRenderer","col","index","onCellsChanged","changes","toConsumableArray","_ref","isThereAnyStudentWithoutName","Text","marginRight","isInvalid","Dialog","isShown","intent","confirmLabel","cancelLabel","onConfirm","onCancel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4088d9f4.chunk.js","sourcesContent":["export interface StudentEvaluations {\n  name: string\n  evaluations: StudentEvaluation[]\n  gradesConfig: GradesConfig\n}\n\nexport interface StudentEvaluation {\n\tid: number\n\tname: string\n\tunits: number[]\n\tunitsGrade: number\n\ttasksGrade: number\n\tdailyGrade: number\n\tfinalGrade: number\n}\n\nexport interface GradesConfig {\n\tunitsGradePercentage: number\n\ttasksGradePercentage: number\n\tdailyGradePercentage: number\n}\n\nexport function isConfigValid(config: GradesConfig): boolean {\n\treturn config.unitsGradePercentage + config.tasksGradePercentage + config.dailyGradePercentage == 100\n}\n\nexport function calculateGrades(evaluations: StudentEvaluation[], config: GradesConfig): StudentEvaluation[] {\n\treturn evaluations.map((evaluation) => calculateGradesForEvaluation(evaluation, config))\n}\n\nexport function calculateGradesForEvaluation(evaluation: StudentEvaluation, config: GradesConfig): StudentEvaluation {\n\tconst unitsGrade = evaluation.units.reduce((acc, unit) => unit + acc, 0) / evaluation.units.length\n\tconst finalGrade = ((unitsGrade * config.unitsGradePercentage) + (evaluation.dailyGrade * config.dailyGradePercentage) + (evaluation.tasksGrade * config.tasksGradePercentage)) / 100\n\treturn {...evaluation, unitsGrade, finalGrade}\n}","export const firebaseConfig = {\n    apiKey: \"AIzaSyDkId_dG4QjU31XqPLpGDyWf78gYX9wwFg\",\n    authDomain: \"students-evaluator.firebaseapp.com\",\n    databaseURL: \"https://students-evaluator.firebaseio.com\",\n    projectId: \"students-evaluator\",\n    storageBucket: \"students-evaluator.appspot.com\",\n    messagingSenderId: \"122329597109\"\n}","import firebase from \"firebase\";\nimport { StudentEvaluations } from \"./StudentEvaluation\";\nimport { firebaseConfig } from \"./FirebaseConfig\";\nimport { AppState } from \"./App\";\n\nexport class Database {\n\n    private firestore: firebase.firestore.Firestore\n\n    constructor() {        \n        firebase.initializeApp(firebaseConfig);\n        this.firestore = firebase.firestore()\n    }\n\n    saveState(state: AppState) {\n        localStorage.setItem(\"appState\", JSON.stringify(state))\n    }\n\n    getState(): AppState | null {\n        const unparsedState = localStorage.getItem(\"appState\")\n        if(unparsedState) {\n            return JSON.parse(unparsedState)\n        } else {\n            return null\n        }\n    }\n\n    async saveStateOnCloud(studentEvaluations: StudentEvaluations): Promise<any> {\n        return this.firestore.collection(\"StudentsEvaluations\").add(studentEvaluations)\n    }\n\n}","import React, { } from 'react';\nimport './App.css';\nimport ReactDataSheet from 'react-datasheet';\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport { Pane, Button, Text, Heading, Select, TextInput, Dialog } from 'evergreen-ui';\nimport { StudentEvaluation, StudentEvaluations, calculateGrades, GradesConfig, isConfigValid } from './StudentEvaluation';\nimport { Database } from './Database';\n\nexport interface GridElement extends ReactDataSheet.Cell<GridElement, number> {\n  value: string | number | null;\n}\n\nclass MyReactDataSheet extends ReactDataSheet<GridElement, number> { }\n\nexport interface AppState {\n  evaluations: StudentEvaluations[];\n  currentEvaluation: StudentEvaluations;\n  grid: GridElement[][];\n  nextConfigCandidate: GradesConfig;\n  nextConfigCandidateValid: boolean;\n  deleteDialogShown: boolean;\n}\n\nconst database = new Database()\n\nconst defaultGradesConfig = {\n  unitsGradePercentage: 40,\n  tasksGradePercentage: 40,\n  dailyGradePercentage: 20\n}\n\nconst columns = [\n  'Nombre alumno',\n  'Unidad 1',\n  'Unidad 2',\n  'Unidad 3',\n  'Unidad 4',\n  'Unidad 5',\n  'Unidad 6',\n  'Unidad 7',\n  'Unidad 8',\n  'Unidad 9',\n  'Unidad 10',\n  'Pruebas',\n  'Cuadernos y tareas',\n  'Observación diaria',\n  'Nota final'\n];\n\n//You can also strongly type all the Components or SFCs that you pass into ReactDataSheet.\nconst cellRenderer: ReactDataSheet.CellRenderer<GridElement, number> = (props) => {\n  const color = props.cell.readOnly ? 'grey' : undefined\n  const style = { padding: '16px', background: color };\n  return (\n    <td style={style} onMouseDown={props.onMouseDown} onMouseOver={props.onMouseOver} onDoubleClick={props.onDoubleClick} className=\"cell\">\n      {props.children}\n    </td>\n  )\n}\n\nfunction evaluationsToGrid(evaluations: StudentEvaluation[]): GridElement[][] {\n  return evaluations.map((evaluation) => {\n    return evaluationToGridRow(evaluation)\n  })\n}\n\nfunction evaluationToGridRow(evaluation: StudentEvaluation): GridElement[] {\n  const row: GridElement[] = [];\n\n  row.push({ value: evaluation.id, readOnly: true })\n  row.push({ value: evaluation.name })\n  evaluation.units.forEach((unit) => {\n    row.push({ value: unit })\n  })\n  row.push({ value: evaluation.unitsGrade, readOnly: true })\n  row.push({ value: evaluation.tasksGrade })\n  row.push({ value: evaluation.dailyGrade })\n  row.push({ value: evaluation.finalGrade, readOnly: true })\n\n  return row\n}\n\nfunction gridToEvaluations(grid: GridElement[][]): StudentEvaluation[] {\n  return grid.map((row) => gridRowToEvaluation(row))\n}\n\nfunction gridRowToEvaluation(row: GridElement[]): StudentEvaluation {\n  const fixedFields = 6\n  const numberOfUnits = row.length - fixedFields\n  const indexAfterUnits = 2 + numberOfUnits\n\n  const id = row[0].value as number\n  const name = row[1].value as string\n  const units = row.slice(2, indexAfterUnits).map((unit) => parseFloat(`${unit.value}` || \"0\"))\n  const unitsGrade = parseFloat(`${row[indexAfterUnits].value}` || \"0\")\n  const tasksGrade = parseFloat(`${row[indexAfterUnits + 1].value}` || \"0\")\n  const dailyGrade = parseFloat(`${row[indexAfterUnits + 2].value}` || \"0\")\n  const finalGrade = parseFloat(`${row[indexAfterUnits + 3].value}` || \"0\")\n\n  return {\n    id,\n    name,\n    units,\n    unitsGrade,\n    tasksGrade,\n    dailyGrade,\n    finalGrade\n  }\n}\n\nfunction isThereAnyStudentWithoutName(evaluations: StudentEvaluation[]): boolean {\n  const studentWithoutName = evaluations.find((evaluation) => !evaluation.name)\n  return studentWithoutName ? true : false\n}\n\nexport class App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props)\n    const state = database.getState()\n\n    if (state) {\n      this.state = state\n    } else {\n      const firstEvaluation = { id: 1, name: \"Ricardo Pallás\", units: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unitsGrade: 0, tasksGrade: 0, dailyGrade: 0, finalGrade: 0 }\n      const evaluation: StudentEvaluations = { name: \"Lengua - Primer trimestre 2019\", evaluations: [firstEvaluation], gradesConfig: defaultGradesConfig }\n      this.state = {\n        evaluations: [evaluation],\n        currentEvaluation: evaluation,\n        grid: evaluationsToGrid(evaluation.evaluations),\n        nextConfigCandidate: defaultGradesConfig,\n        nextConfigCandidateValid: true,\n        deleteDialogShown: false\n      }\n    }\n  }\n\n  addRow = () => {\n    const lastId = this.state.currentEvaluation.evaluations.length > 0 ? this.state.currentEvaluation.evaluations[this.state.currentEvaluation.evaluations.length - 1].id : 0\n    const evaluation = { id: lastId + 1, name: \"Ricardo Pallás\", units: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unitsGrade: 0, tasksGrade: 0, dailyGrade: 0, finalGrade: 0 }\n    this.state.currentEvaluation.evaluations.push(evaluation)\n    this.state.grid.push(evaluationToGridRow(evaluation))\n    this.updateState(this.state)\n  }\n\n  unitsGradeConfigChanged = (value: string) => {\n    const valueNumber = parseInt(value, 10) || 0;\n    const configCandidate = { ...this.state.nextConfigCandidate, unitsGradePercentage: valueNumber }\n    this.configPercentageChanged(configCandidate)\n  }\n\n  tasksGradeConfigChanged = (value: string) => {\n    const valueNumber = parseInt(value, 10) || 0;\n    const configCandidate = { ...this.state.nextConfigCandidate, tasksGradePercentage: valueNumber }\n    this.configPercentageChanged(configCandidate)\n  }\n\n  dailyGradeConfigChanged = (value: string) => {\n    const valueNumber = parseInt(value, 10) || 0;\n    const configCandidate = { ...this.state.nextConfigCandidate, dailyGradePercentage: valueNumber }\n    this.configPercentageChanged(configCandidate)\n  }\n\n  configPercentageChanged = (newConfig: GradesConfig) => {\n    console.log(newConfig)\n    if (isConfigValid(newConfig)) {\n      this.updateState({ ...this.state, nextConfigCandidate: newConfig, currentEvaluation: { ...this.state.currentEvaluation, gradesConfig: newConfig }, nextConfigCandidateValid: true }, () => {\n        const evaluations = this.state.evaluations.map((anEvaluation) => {\n          if (anEvaluation.name === this.state.currentEvaluation.name) {\n            anEvaluation.gradesConfig = newConfig\n          }\n          return anEvaluation\n        })\n\n        this.updateState({ ...this.state, evaluations }, () => {\n          this.updateEvaluations(this.state.currentEvaluation.evaluations, newConfig)\n        })\n      })\n    } else {\n      this.updateState({ ...this.state, nextConfigCandidate: newConfig, nextConfigCandidateValid: false })\n    }\n  }\n\n  updateEvaluations = (evaluations: StudentEvaluation[], config: GradesConfig, callback?: () => void) => {\n    const recalculatedEvaluations = calculateGrades(evaluations, config)\n    const recalculatedGrid = evaluationsToGrid(recalculatedEvaluations)\n    const evaluation = { ...this.state.currentEvaluation, evaluations: recalculatedEvaluations }\n\n    this.updateState({ ...this.state, grid: recalculatedGrid, currentEvaluation: evaluation }, callback)\n  }\n\n  deleteStudentsWithoutName = () => {\n    const evaluations = this.state.currentEvaluation.evaluations.filter((evaluation) => evaluation.name)\n    this.updateState({ ...this.state, deleteDialogShown: false }, () => {\n      this.updateEvaluations(evaluations, this.state.currentEvaluation.gradesConfig)\n    })\n  }\n\n  changeTitle = (title: string) => {\n    const currentEvaluation = { ...this.state.currentEvaluation, name: title }\n    const evaluations = this.state.evaluations.map((evaluation) => {\n      if (evaluation.name === this.state.currentEvaluation.name) {\n        evaluation.name = title\n      }\n      return evaluation\n    })\n    this.updateState({ ...this.state, currentEvaluation, evaluations })\n  }\n\n  addEvaluation = () => {\n    const firstEvaluation = { id: 1, name: \"Ricardo Pallás\", units: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], unitsGrade: 0, tasksGrade: 0, dailyGrade: 0, finalGrade: 0 }\n    const evaluation = { name: \"Nueva evaluación \" + Date.now(), evaluations: [firstEvaluation], gradesConfig: defaultGradesConfig }\n    const evaluations = this.state.evaluations.concat(evaluation)\n    this.updateState({ ...this.state, evaluations }, () => {\n      this.changeCurrentEvaluation(evaluation.name)\n    })\n\n  }\n\n  changeCurrentEvaluation = (evaluationName: string) => {\n    // TODO refactor as save current evaluation grades\n    const currentEvaluation = this.state.currentEvaluation\n    const recalculatedEvaluations = calculateGrades(currentEvaluation.evaluations, currentEvaluation.gradesConfig)\n    const evaluations = this.state.evaluations.map((anEvaluation) => {\n      if (anEvaluation.name === currentEvaluation.name) {\n        anEvaluation.evaluations = recalculatedEvaluations\n      }\n      return anEvaluation\n    })\n\n    this.updateState({ ...this.state, evaluations }, () => {\n      const evaluation = this.state.evaluations.find((evaluation) => (evaluation.name === evaluationName))\n\n      if (evaluation) {\n        const grid = evaluationsToGrid(evaluation.evaluations)\n        this.updateState({ ...this.state, currentEvaluation: evaluation, grid, nextConfigCandidate: evaluation.gradesConfig })\n      }\n    })\n  }\n\n  updateState = (state: AppState, callback?: () => void) => {\n    this.setState(state, () => {\n      database.saveState(state)\n      if(callback){\n        callback()\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Pane height=\"100%\" paddingLeft={32} paddingTop={32} paddingBottom={32} paddingRight={32} background=\"tint2\" borderRadius={3}>\n        <TextInput\n          name=\"text-input-name\"\n          className=\"title\"\n          onChange={(e: any) => this.changeTitle(e.target.value)}\n          value={this.state.currentEvaluation.name} />\n\n        <Pane >\n          <Select width={240} marginTop={16} value={this.state.currentEvaluation.name} onChange={(event: any) => this.changeCurrentEvaluation(event.target.value)}>\n            {this.state.evaluations.map((evaluation) => (<option value={evaluation.name}>{evaluation.name}</option>))}\n          </Select>\n          <Button marginLeft={16} appearance=\"primary\" onClick={this.addEvaluation}>Añadir tabla</Button>\n        </Pane>\n\n        <Pane marginTop={48}>\n          <MyReactDataSheet\n            data={this.state.grid}\n            valueRenderer={(cell) => cell.value}\n            sheetRenderer={props => (\n              <table className={props.className}>\n                <thead>\n                  <tr>\n                    <th className='action-cell' />\n                    {columns.map((col, index) => (<th key={index} className='rotate'> <div><span>{col} </span></div></th>))}\n                  </tr>\n                </thead>\n                <tbody>\n                  {props.children}\n                </tbody>\n              </table>\n            )}\n            onCellsChanged={changes => {\n              const grid = this.state.grid.map(row => [...row])\n              changes.forEach(({ cell, row, col, value }) => {\n                grid[row][col] = { ...grid[row][col], value }\n              })\n              const evaluations = gridToEvaluations(grid)\n              const config = this.state.currentEvaluation.gradesConfig\n              this.updateEvaluations(evaluations, config, () => {\n                if (isThereAnyStudentWithoutName(evaluations)) {\n                  this.updateState({ ...this.state, deleteDialogShown: true })\n                }\n              })\n            }}\n            cellRenderer={cellRenderer}\n          />\n        </Pane>\n\n        <Button marginTop={16} onClick={this.addRow} appearance=\"primary\">Añadir fila</Button>\n\n        <Pane marginTop={48}>\n          <Text className=\"configPercentageText\" width={210} marginRight={4}>Porcentaje pruebas: </Text>\n          <TextInput isInvalid={!this.state.nextConfigCandidateValid} width={40} onChange={(e: any) => this.unitsGradeConfigChanged(e.target.value)} value={this.state.nextConfigCandidate.unitsGradePercentage}></TextInput>\n        </Pane>\n\n        <Pane marginTop={4}>\n          <Text className=\"configPercentageText\" width={210} marginRight={4}>Porcentaje cuadernos y tareas: </Text>\n          <TextInput isInvalid={!this.state.nextConfigCandidateValid} width={40} onChange={(e: any) => this.tasksGradeConfigChanged(e.target.value)} value={this.state.nextConfigCandidate.tasksGradePercentage}></TextInput>\n        </Pane>\n\n        <Pane marginTop={4}>\n          <Text className=\"configPercentageText\" width={210} marginRight={4}>Porcentaje observación diaria: </Text>\n          <TextInput isInvalid={!this.state.nextConfigCandidateValid} width={40} onChange={(e: any) => this.dailyGradeConfigChanged(e.target.value)} value={this.state.nextConfigCandidate.dailyGradePercentage}></TextInput>\n        </Pane>\n\n        <Dialog\n          isShown={this.state.deleteDialogShown}\n          title=\"Borrar almuno\"\n          intent=\"danger\"\n          confirmLabel=\"Sí\"\n          cancelLabel=\"No\"\n          onConfirm={this.deleteStudentsWithoutName}\n          onCancel={() => (this.updateState({ ...this.state, deleteDialogShown: false }))}>\n          ¿Desea borrar el alumno?\n      </Dialog>\n\n      </Pane>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}